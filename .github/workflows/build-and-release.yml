name: Build and Release whisper-server

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            name: linux-amd64
            binary_name: whisper-server
            asset_name: whisper.cpp-linux-amd64.zip
          - os: windows-latest
            arch: x64
            name: windows-amd64
            binary_name: whisper-server.exe
            asset_name: whisper.cpp-windows-amd64.zip
          - os: macos-latest
            arch: x64
            name: macos-amd64
            binary_name: whisper-server
            asset_name: whisper.cpp-macos-amd64.zip
          - os: macos-14 # Apple Silicon (M1/M2) runner
            arch: arm64
            name: macos-arm64
            binary_name: whisper-server
            asset_name: whisper.cpp-macos-arm64.zip

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clone whisper.cpp repository
      run: git clone https://github.com/ggerganov/whisper.cpp.git

    - name: Build whisper.cpp
      working-directory: whisper.cpp
      shell: bash
      run: |
        CMAKE_ARGS=""
        # For Apple Silicon, enable Metal for better performance
        if [[ "${{ matrix.name }}" == "macos-arm64" ]]; then
          CMAKE_ARGS="-DWHISPER_METAL=1"
        fi

        # This ensures the RPATH is set correctly for both the build tree and the install destination.
        # It makes the binaries in the build directory relocatable without needing a separate install step.
        CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON"

        # Set RPATH so the executable can find shared libraries in its own directory
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_MACOSX_RPATH=ON -DCMAKE_INSTALL_RPATH=@executable_path"
        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          # Use $ORIGIN for Linux to find libraries in the same directory as the executable
          CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_INSTALL_RPATH='\$ORIGIN'"
        fi

        # Configure
        echo "Using CMAKE_ARGS: $CMAKE_ARGS"
        cmake -B build $CMAKE_ARGS
        # Build
        cmake --build build --config Release -j

    - name: List build artifacts for debugging
      if: always()
      working-directory: whisper.cpp
      run: |
        echo "Listing contents of build directory:"
        ls -R build

    - name: Prepare artifact
      shell: bash
      run: |
        mkdir staging

        # Copy the main executable
        SERVER_EXECUTABLE=$(find whisper.cpp/build -type f -name "${{ matrix.binary_name }}" | head -n 1)
        if [[ -z "$SERVER_EXECUTABLE" ]]; then
          echo "Error: Could not find server binary '${{ matrix.binary_name }}'"
          ls -R whisper.cpp/build
          exit 1
        fi
        echo "Copying server executable: $SERVER_EXECUTABLE"
        cp "$SERVER_EXECUTABLE" staging/

        # Copy whisper-cli and rename it
        CLI_EXECUTABLE_SRC_NAME="main"
        CLI_EXECUTABLE_DEST_NAME="whisper-cli"
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          CLI_EXECUTABLE_SRC_NAME="main.exe"
          CLI_EXECUTABLE_DEST_NAME="whisper-cli.exe"
        fi
        CLI_EXECUTABLE=$(find whisper.cpp/build -type f -name "$CLI_EXECUTABLE_SRC_NAME" | head -n 1)
        if [[ -z "$CLI_EXECUTABLE" ]]; then
          echo "Error: Could not find whisper-cli binary '$CLI_EXECUTABLE_SRC_NAME'"
          ls -R whisper.cpp/build
          exit 1
        fi
        echo "Copying whisper-cli executable: $CLI_EXECUTABLE as $CLI_EXECUTABLE_DEST_NAME"
        cp "$CLI_EXECUTABLE" "staging/$CLI_EXECUTABLE_DEST_NAME"
        
        # Copy VAD model
        VAD_MODEL="silero-vad-v5.1.2.bin"
        if [[ -f "$VAD_MODEL" ]]; then
            echo "Copying VAD model: $VAD_MODEL"
            cp "$VAD_MODEL" staging/
        else
            echo "Warning: VAD model '$VAD_MODEL' not found. Skipping."
        fi

        # Find and copy any shared libraries and their symlinks from the entire build directory
        echo "Finding and copying shared libraries (including symlinks)..."
        find whisper.cpp/build \( -name "*.so" -o -name "*.so.*" -o -name "*.dylib" -o -name "*.dll" \) \( -type f -o -type l \) -print -exec cp -a {} staging/ \;

        echo "Staging directory contents:"
        ls -lh staging

    - name: Package binary
      working-directory: staging
      shell: bash
      run: |
        echo "Files to be packaged:"
        ls -lh
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # The glob * should handle all files like .e
          powershell -Command "Compress-Archive -Path * -DestinationPath '../${{ matrix.asset_name }}'"
          echo "Windows package created: ${{ matrix.asset_name }}"
          powershell -Command "Get-Content -Path '../${{ matrix.asset_name }}' | Select-Object -First 0; Write-Host 'Package size:'; (Get-Item '../${{ matrix.asset_name }}').Length"
        else
          # Zip all files in the current (staging) directory, preserving symlinks
          zip --symlinks ../${{ matrix.asset_name }} *
          echo "Linux/macOS package created: ${{ matrix.asset_name }}"
          echo "Package contents:"
          unzip -l ../${{ matrix.asset_name }}
        fi
        echo "Final package location: ../${{ matrix.asset_name }}"

    - name: Verify Packaged Artifact
      shell: bash
      run: |
        echo "--- Verifying packaged artifact ---"
        
        echo "Cleaning up build environment to ensure artifact is self-contained..."
        rm -rf whisper.cpp
        
        echo "Creating temporary directory for verification..."
        mkdir verification-dir
        
        echo "Unzipping artifact into verification directory..."
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          powershell -Command "Expand-Archive -Path '${{ matrix.asset_name }}' -DestinationPath 'verification-dir' -Force"
        else
          unzip ${{ matrix.asset_name }} -d verification-dir
        fi
        
        # Run verification inside the unzipped directory
        cd verification-dir
        
        echo "Contents of unzipped artifact:"
        ls -R
        
        # Find the server binary in the current directory
        SERVER_EXECUTABLE="./${{ matrix.binary_name }}"
        if [[ ! -f "$SERVER_EXECUTABLE" ]]; then
          echo "Error: Could not find server binary '${{ matrix.binary_name }}' in unzipped artifact"
          exit 1
        fi
        echo "Server binary found at: $SERVER_EXECUTABLE"
        chmod +x "$SERVER_EXECUTABLE"

        # Download model
        echo "Downloading model..."
        mkdir -p models
        curl -L -o models/ggml-tiny.bin https://yaklang.oss-accelerate.aliyuncs.com/gguf/whisper-tiny-q5.bin

        # Start the server in the background
        echo "Starting server from unzipped artifact..."
        "$SERVER_EXECUTABLE" -m models/ggml-tiny.bin --port 8080 &
        SERVER_PID=$!
        
        # Wait for the server to be ready on port 8080
        echo "Waiting for server to start... (timeout in 60s)"
        WAIT_SECONDS=0
        TIMEOUT=60
        while true; do
            # By placing curl in an `if` condition, we prevent `set -e` from exiting the script on failure.
            if curl -s http://127.0.0.1:8080 > /dev/null; then
                echo "Server is listening on port 8080."
                break # Success
            else
                # curl failed. If the reason is not "could not connect" (7), it's a real error.
                if [[ $? -ne 7 ]]; then
                    echo "Server check failed with unexpected curl error $?. Aborting."
                    kill $SERVER_PID
                    exit 1
                fi
                # Exit code was 7, which is expected while waiting. Continue loop.
            fi

            if (( WAIT_SECONDS >= TIMEOUT )); then
                echo "Timeout: Server failed to start within $TIMEOUT seconds."
                kill $SERVER_PID
                exit 1
            fi
            if ! kill -0 $SERVER_PID 2>/dev/null; then
                echo "Server process terminated unexpectedly."
                exit 1
            fi
            sleep 1
            WAIT_SECONDS=$((WAIT_SECONDS+1))
        done

        # Select a sample file (path is relative to verification-dir)
        SAMPLE_FILE="$GITHUB_WORKSPACE/samples/jfk.mp3"
        if [ ! -f "$SAMPLE_FILE" ]; then
            echo "Sample file not found at $SAMPLE_FILE."
            exit 1
        fi

        # Send request using curl
        echo "Sending transcription request for $SAMPLE_FILE..."
        RESPONSE=$(curl --silent --request POST \
          --url http://127.0.0.1:8080/inference \
          --header 'Content-Type: multipart/form-data' \
          --form "file=@$SAMPLE_FILE")

        # Kill the server
        kill $SERVER_PID
        wait $SERVER_PID || true

        # Validate the response
        echo "Response from server: $RESPONSE"
        TRANSCRIPTION=$(echo "$RESPONSE" | grep -o '"text":"[^"]*"' | cut -d'"' -f4)
        
        if [ -z "$TRANSCRIPTION" ]; then
          echo "Verification of packaged artifact FAILED: Transcription is empty."
          exit 1
        else
          echo "Verification of packaged artifact SUCCESSFUL. Transcription: $TRANSCRIPTION"
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.name }}
        path: ${{ matrix.asset_name }}

  package:
    name: Package Release
    needs: build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files
        run: ls -R artifacts

      - name: Calculate SHA256 checksums
        run: |
          find artifacts -type f -name "*.zip" | while read -r file; do
            sha256sum "$file" | awk '{print $1}' > "${file}.sha256"
          done

      - name: List files to be uploaded
        run: ls -R artifacts

      - name: Download Yak for uploading
        run: |
          wget -q -O './yak' https://yaklang.oss-accelerate.aliyuncs.com/yak/ci/yak_linux_amd64
          chmod +x ./yak

      - name: Upload to OSS
        env:
          OSS_KEY_ID: ${{ secrets.OSS_KEY_ID }}
          OSS_KEY_SECRET: ${{ secrets.OSS_KEY_SECRET }}
          OSS_BUCKET: yaklang
          OSS_ENDPOINT: oss-accelerate.aliyuncs.com
        run: |
          DATE=$(date +'%Y%m%d')
          echo "Preparing to upload artifacts to /whisper.cpp/$DATE/"

          find ./artifacts -type f \( -name "*.zip" -o -name "*.sha256" \) | while read -r file_path; do
            if [ -f "$file_path" ]; then
              filename=$(basename "$file_path")
              remote_path="/whisper.cpp/$DATE/$filename"
              echo "Uploading $file_path to oss://$OSS_BUCKET$remote_path"
              ./yak upload-oss \
                -b "$OSS_BUCKET" \
                --endpoint "$OSS_ENDPOINT" \
                -ak "$OSS_KEY_ID" \
                -sk "$OSS_KEY_SECRET" \
                -t 5 \
                -f "$file_path:$remote_path"
            else
              echo "File not found: $file_path, skipping."
            fi
          done