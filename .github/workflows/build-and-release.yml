name: Build and Release whisper-server

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            name: linux-amd64
            binary_name: whisper-server
            asset_name: whisper.cpp-linux-amd64.zip
          - os: windows-latest
            arch: x64
            name: windows-amd64
            binary_name: whisper-server.exe
            asset_name: whisper.cpp-windows-amd64.zip
          - os: macos-latest
            arch: x64
            name: macos-amd64
            binary_name: whisper-server
            asset_name: whisper.cpp-macos-amd64.zip
          - os: macos-14 # Apple Silicon (M1/M2) runner
            arch: arm64
            name: macos-arm64
            binary_name: whisper-server
            asset_name: whisper.cpp-macos-arm64.zip

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clone whisper.cpp repository
      run: git clone https://github.com/ggerganov/whisper.cpp.git

    - name: Build whisper.cpp
      working-directory: whisper.cpp
      shell: bash
      run: |
        CMAKE_ARGS=""
        # For Apple Silicon, enable Metal for better performance
        if [[ "${{ matrix.name }}" == "macos-arm64" ]]; then
          CMAKE_ARGS="-DWHISPER_METAL=1"
        fi
        # For all macOS builds, make binaries relocatable
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_MACOSX_RPATH=ON -DCMAKE_INSTALL_RPATH=@executable_path"
        fi
        # Configure
        cmake -B build $CMAKE_ARGS
        # Build
        cmake --build build --config Release -j

    - name: Verify build
      working-directory: whisper.cpp
      shell: bash
      run: |
        # Find the server binary
        SERVER_EXECUTABLE=$(find build -type f -name "${{ matrix.binary_name }}" | head -n 1)
        if [[ -z "$SERVER_EXECUTABLE" ]]; then
          echo "Error: Could not find server binary '${{ matrix.binary_name }}'"
          ls -R build
          exit 1
        fi
        echo "Server binary found at: $SERVER_EXECUTABLE"
        chmod +x "$SERVER_EXECUTABLE"

        # Download model
        echo "Downloading model..."
        mkdir -p models
        curl -L -o models/ggml-tiny.bin https://yaklang.oss-accelerate.aliyuncs.com/gguf/whisper-tiny-q5.bin

        # Start the server in the background
        echo "Starting server..."
        "$SERVER_EXECUTABLE" -m models/ggml-tiny.bin --port 8080 &
        SERVER_PID=$!
        sleep 5 # Give server time to start

        # Check if server is running (cross-platform way)
        if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "Server failed to start!"
            exit 1
        fi
        
        # Select a sample file
        SAMPLE_FILE="../samples/jfk.mp3"
        if [ ! -f "$SAMPLE_FILE" ]; then
            echo "Sample file not found at $SAMPLE_FILE. Listing samples directory:"
            ls -R ../samples
            exit 1
        fi

        # Send request using curl
        echo "Sending transcription request for $SAMPLE_FILE..."
        RESPONSE=$(curl --silent --request POST \
          --url http://127.0.0.1:8080/inference \
          --header 'Content-Type: multipart/form-data' \
          --form "file=@$SAMPLE_FILE")

        # Kill the server
        kill $SERVER_PID
        wait $SERVER_PID || true

        # Validate the response
        echo "Response from server: $RESPONSE"
        # Extract transcription text using grep and cut for portability (no jq needed)
        TRANSCRIPTION=$(echo "$RESPONSE" | grep -o '"text":"[^"]*"' | cut -d'"' -f4)
        
        if [ -z "$TRANSCRIPTION" ]; then
          echo "Verification failed: Transcription is empty or not found in response."
          exit 1
        else
          echo "Verification successful. Transcription: $TRANSCRIPTION"
        fi

    - name: List build artifacts for debugging
      if: always()
      working-directory: whisper.cpp
      run: |
        echo "Listing contents of build directory:"
        ls -R build

    - name: Prepare artifact
      shell: bash
      run: |
        mkdir staging
        SERVER_EXECUTABLE=$(find whisper.cpp/build -type f -name "${{ matrix.binary_name }}" | head -n 1)
        if [[ -z "$SERVER_EXECUTABLE" ]]; then
          echo "Error: Could not find server binary '${{ matrix.binary_name }}'"
          ls -R whisper.cpp/build
          exit 1
        fi
        
        BINARY_DIR=$(dirname "$SERVER_EXECUTABLE")
        
        echo "Found binary directory at: $BINARY_DIR"
        echo "Copying all contents from binary directory to staging..."
        cp -r "$BINARY_DIR"/* staging/
        
        echo "Staging directory contents:"
        ls -R staging

    - name: Package binary
      working-directory: staging
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # The glob * should handle all files like .exe and .dll
          powershell -Command "Compress-Archive -Path * -DestinationPath '../${{ matrix.asset_name }}'"
        else
          # Zip all files in the current (staging) directory
          zip ../${{ matrix.asset_name }} *
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.name }}
        path: ${{ matrix.asset_name }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: List artifacts
      run: ls -R artifacts

    - name: Create Release and Upload Assets
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        TAG_NAME="release-$(date +%Y%m%d-%H%M%S)"
        gh release create "$TAG_NAME" \
          --title "whisper-server binaries $TAG_NAME" \
          --notes "Automated release of whisper-server binaries for various platforms." \
          artifacts/*/*.zip 